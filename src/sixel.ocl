uint bit_ceil(uint x) {
  if (x == 0)
    return 1;
  if (x & (x - 1) == 0)
    return x;
  x |= (x >> 1);
  x |= (x >> 2);
  x |= (x >> 4);
  x |= (x >> 8);
  x |= (x >> 16);
  return x + 1;
}

void scan_reduce(local uint* arr) {
  
}

kernel void sixel_encode_row(int width, uchar col, 
  global const uchar* input, 
  global uchar* raw_buf,
  global uint* runs_scan) {
    
  int id = get_global_id(0);
  
  // encode individual sixels
  // ==================================
  {
    int mask0 = ((int) (col == input[id + 0]));
    int mask1 = ((int) (col == input[id + width])) << 1;
    int mask2 = ((int) (col == input[id + 2 * width])) << 2;
    int mask3 = ((int) (col == input[id + 3 * width])) << 3;
    int mask4 = ((int) (col == input[id + 4 * width])) << 4;
    int mask5 = ((int) (col == input[id + 5 * width])) << 5;
    
    raw_buf[id] = ((mask0 | mask1 | mask2) | (mask3 | mask4 | mask5)) + 0x3F;
  }
  barrier(CLK_GLOBAL_MEM_FENCE);
  
  // perform run detection
  // ==================================
  runs_scan[id] = (raw_buf[id] != raw_buf[id - 1]);
}